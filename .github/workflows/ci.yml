name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python (to run tests)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Install dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests (if pytest or other tests exist)
      - name: Run tests
        run: |
          pytest || echo "No tests found"

  docker-build-push:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/noise-forecasting:latest .

      # Push image to Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/noise-forecasting:latest

  deploy-cloud-run:
    name: deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: docker-build-push
    permissions:
      contents: read
      id-token: write
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}     # set in repo secrets
      GCP_REGION: ${{ secrets.GCP_REGION }}             # e.g. europe-west1
      CLOUD_RUN_SERVICE: noise-forecasting-frontend     # change if needed
      IMAGE_URI: docker.io/{{ secrets.DOCKERHUB_USERNAME }}/noise-forecasting:latest
      PORT: 8501                                        # change to 8000 if deploying FastAPI
      CPU: 1
      MEMORY: 1Gi
      CONCURRENCY: 80
      MIN_INSTANCES: 0
      MAX_INSTANCES: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Auth via Workload Identity Federation (recommended). Provide these secrets.
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}  # arn-like resource
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }} 

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy "$CLOUD_RUN_SERVICE" \
            --image="$IMAGE_URI" \
            --project="$GCP_PROJECT_ID" \
            --region="$GCP_REGION" \
            --platform=managed \
            --allow-unauthenticated \
            --port="$PORT" \
            --cpu="$CPU" \
            --memory="$MEMORY" \
            --concurrency="$CONCURRENCY" \
            --min-instances="$MIN_INSTANCES" \
            --max-instances="$MAX_INSTANCES"

      - name: Show service URL
        run: |
          URL=$(gcloud run services describe "$CLOUD_RUN_SERVICE" --region "$GCP_REGION" --format='value(status.url)')
          echo "Cloud Run URL: $URL"
          echo "CLOUD_RUN_URL=$URL" >> $GITHUB_ENV 
